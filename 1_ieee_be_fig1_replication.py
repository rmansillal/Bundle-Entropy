# -*- coding: utf-8 -*-
"""1_IEEE_BE_Fig1_Replication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MJG7mA8_KXuzHZZ24FGZNbejaSvAYQzG

# *Mansilla, R., Smith, G., Smith A. and Goulding, J. "Bundle entropy as an optimized measure of consumers' systematic product choice combinations in mass transactional data". In 2022 IEEE International Conference on Big Data (IEEE Big Data 2022), Osaka, Japan.*
-----

# **Code and replication of method on synthetic data**

## 1) Connect to database & Import Python libraries
"""

# Import libraries
import numpy as np
import pandas as pd
from getpass import getpass
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# Commented out IPython magic to ensure Python compatibility.
# Connect to database
# %config Completer.use_jedi = False
# %reload_ext sql

# Specify your username, hostname and database
# %sql {f"postgresql://<username>:{getpass()}@<hostname>/<database>"}

"""## 2) SQL code to create "Table with synthetic data"
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# -- ##### CREATE THE TABLE WITH SYNTHETIC DATA EXAMPLES #####
# 
# CREATE TABLE rm.figure1 (customer_id TEXT, basket_id TEXT, item TEXT);
# 
# -- INSERT EXAMPLE DATA
# -- Customer 1 ------> Sequence of baskets: ['mbj', 'mbj', 'mbj', 'mbj','mbj'] 
# INSERT INTO rm.figure1 values ('C1','1','m'),('C1','1','b'),('C1','1','j'),
#                                           ('C1','2','m'),('C1','2','b'),('C1','2','j'), 
#                                           ('C1','3','m'),('C1','3','b'),('C1','3','j'), 
#                                           ('C1','4','m'),('C1','4','b'),('C1','4','j'), 
#                                           ('C1','5','m'),('C1','5','b'),('C1','5','j');
# 											 
# -- Customer 2 ------> Sequence of baskets: ['mbp', 'mbp', 'mbp', 'mb','mb'] 
# INSERT INTO rm.figure1 values ('C2','1','m'),('C2','1','b'),('C2','1','p'),
#                                           ('C2','2','m'),('C2','2','b'),('C2','2','p'), 
#                                           ('C2','3','m'),('C2','3','b'),('C2','3','p'), 
#                                           ('C2','4','m'),('C2','4','b'), 
#                                           ('C2','5','m'),('C2','5','b');
#                     
# -- Customer 3 ------> Sequence of baskets: [['m', 'mb', 'mp', 'ms','mc'] 
# INSERT INTO rm.figure1 values ('C3','1','m'),
#                                           ('C3','2','m'),('C3','2','b'),
#                                           ('C3','3','m'),('C3','3','p'), 
#                                           ('C3','4','m'),('C3','4','s'), 
#                                           ('C3','5','m'),('C3','5','c');
# 										   
# -- Customer 4 ------> Sequence of baskets: ['mb', 'bp', 'ps','sc']
# INSERT INTO rm.figure1 values ('C4','1','m'),('C4','1','b'),
#                                           ('C4','2','b'),('C4','2','p'), 
#                                           ('C4','3','p'),('C4','3','s'),
#                                           ('C4','4','s'),('C4','4','c');									   
# 										   										   
# -- Customer 5 ------> Sequence of baskets: ['m', 'b', 'p','s','c'] 
# INSERT INTO rm.figure1 values ('C5','1','m'),
#                                           ('C5','2','b'),
#                                           ('C5','3','p'), 
#                                           ('C5','4','s'),
#                                           ('C5','5','c');									   
#

"""## 3) FIGURE 1 of our paper"""

#-- create dataframe with the synthetic examples
toy = {'C1': '[mbj, mbj, mbj, mbj,mbj]', 
        'C2': '[mbp, mbp, mbp, mb, mb]',
        'C3': '[m, mb, mp, ms, mc]',
        'C4': '[mb, bp, ps, sc]',
        'C5': '[m, b, p, s,c]'}

df_toy = pd.DataFrame.from_dict(toy, columns=['baskets'], orient='index')
df_toy = df_toy.reset_index(level=0)
df_toy.rename(columns={'index': 'customer_id'}, inplace=True)
df_toy.head()

# Compute BE, IE, BLE, and BRE (with 3 different minsup paremeter: 10%, 24%, 70%)
sqlnn = """
          SELECT customer_id, 
                 round(bev3_norm(basket_id, item),2) as BE,
                 round(norm_entropy(item ),2) as IE, 
                 round(joint_entropy(basket_id, item),2) as BLE,
                 round(bre(basket_id, item,0.10 ),2) as BRE_10, 
                 round(bre(basket_id, item,0.24 ),2) as BRE_24, 
                 round(bre(basket_id, item,0.70 ),2) as BRE_70
          FROM rm.figure1 
          GROUP BY customer_id 
          ORDER BY 2
      """
comparing_se_be_brenn = %sql {sqlnn}

# Convert into a dataframe
comparing_se_be_brenn = comparing_se_be_brenn.DataFrame()

# Join with df_toy and re-order columns
join_table = pd.merge(comparing_se_be_brenn, df_toy, on="customer_id")
join_table = join_table[['customer_id', 'baskets','be', 'ie','ble',	'bre_10',	'bre_24',	'bre_70']]

# Display table
print('\n')
print('NORMALISED')
join_table.sort_values(by='customer_id')

